import numpy as np
import tensorflow as tf

# Define the data
x_data = np.array([[1,2],[2,3],[3,1],[4,3],[5,3],[6,2]])
y_data = np.array([[0],[0],[0],[1],[1],[1]])

# Define the model
X = tf.placeholder(tf.float32, shape=[None, 2])
Y = tf.placeholder(tf.float32, shape=[None, 1])
W = tf.Variable(tf.random_normal([2, 1]), name='weight')
b = tf.Variable(tf.random_normal([1]), name='bias')
hypothesis = tf.sigmoid(tf.matmul(X, W) + b)

# Define the cost function and optimizer
cost = -tf.reduce_mean(Y * tf.log(hypothesis) + (1 - Y) * tf.log(1 - hypothesis))
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01).minimize(cost)

# Train the model
sess = tf.Session()
sess.run(tf.global_variables_initializer())
for step in range(10001):
    cost_val, _ = sess.run([cost, optimizer], feed_dict={X: x_data, Y: y_data})
    if step % 200 == 0:
        print(step, cost_val)

# Evaluate the model
predicted = tf.cast(hypothesis > 0.5, dtype=tf.float32)
accuracy = tf.reduce_

mean(tf.cast(tf.equal(predicted, Y), dtype=tf.float32))
print("Accuracy: ", accuracy.numpy())
Let's add an additional optimizer to our model to make it learn on its own

optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)
train = optimizer.minimize(cost)
Train the model for 100 epochs

for step in range(100):
cost_val, _ = sess.run([cost, train], feed_dict={X: x_data, Y: y_data})
if step % 10 == 0:
print(step, cost_val)
Accuracy after training

h, c, a = sess.run([hypothesis, predicted, accuracy], feed_dict={X: x_data, Y: y_data})
print("\nHypothesis: ", h, "\nCorrect: ", c, "\nAccuracy: ", a)

